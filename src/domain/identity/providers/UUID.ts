import { v4 } from "uuid";

/**
 * ## Guid
 *
 * Represents a guid string. Values are generated by uuid package.
 */
export class UUID {
	private value: string;

	/**
	 * Creates an instance of Guid.
	 *
	 * If a guid is passed as a parameter it will be validated,
	 * otherwise a new guid value will be generated.
	 *
	 * @param {string} [guid]
	 * @memberof Guid
	 */
	constructor(guid?: string) {
		if (guid) {
			if (!UUID.isValidGuid(guid))
				throw new Error("Invalid guid value supplied");
		} else {
			guid = v4();
		}

		this.value = guid.toLocaleLowerCase();
	}

	/**
	 * Gets the primitive value of the uuid.
	 * @returns The string value of the uuid.
	 */
	protected get primitiveValue(): string {
		return this.value;
	}

	/**
	 * Checks if a given string is a valid GUID.
	 * @param {string} guid - The GUID to be validated.
	 * @returns {boolean} Whether the GUID is valid or not.
	 */
	static isValidGuid(guid: string): boolean {
		// Define regex patterns for different parts of a uuid
		const hexChars = "[0-9a-f]";
		const hexCharsWithHyphen = `(${hexChars}{4}-?)`;

		// Define regex patterns for start, middle, and end of uuid
		const patternStart = new RegExp(`^${hexChars}{8}`, "i");
		const patternMiddle = new RegExp(`${hexCharsWithHyphen}{3}`, "i");
		const patternEnd = new RegExp(`-${hexChars}{12}$`, "i");

		// Combine the regex patterns to form the complete uuid pattern
		const pattern = new RegExp(
			patternStart.source + patternMiddle.source + patternEnd.source
		);

		// Test if the given string matches the uuid pattern
		return pattern.test(guid);
	}
}
